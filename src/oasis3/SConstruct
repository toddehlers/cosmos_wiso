# SConstruct build file for scons
# Version 0.1 (2018.05.17), written by Willi Kappler

# src/mod/echam5j/echam/SConstruct

import os
import sys

# Add our own command line option for debug builds
AddOption("--debug-build", action="store_true", dest="debug_build")

# Define system environmen with all shell variables.

fortran_path = [".", "../clim", "../psmile", "../fscint", "../anaism", "../anaisg/",
    "../scrip", "../../lib/netcdf"]

env = Environment(ENV = os.environ,
    F77PATH = fortran_path,
    F90PATH = fortran_path,
    F95PATH = fortran_path,
    FORTRANPATH = fortran_path,
)

# Only change environmemt if we do a real build
if not (GetOption("help") or GetOption("clean")):
    debug_build = GetOption("debug_build")

    # Specify your compiler and flags here:
    #compiler = "ifort"
    compiler = "mpif90"
    #compile_flags = "-fpp -warn all"
    compile_flags = "-cpp -O3"

    c_compiler = "gcc"
    c_flags = "-Wall -Wextra"
    c_debug_flags = "-g3"
    c_optimize_flags = "-O3"


    cpppath = fortran_path

    debug_flags = "-fpp -g -check all -debug all"
    #optimize_flags = "-fast"
    optimize_flags = ""
    link_flags_debug = "-g -check all -debug all"
    #link_flags_release = "-fast"
    link_flags_release = ""

    env.Replace(LINK = compiler)
    env.Replace(F77 = compiler)
    env.Replace(F90 = compiler)
    env.Replace(F95 = compiler)
    env.Replace(FORTRAN = compiler)
    
    env.Append(FORTRANFLAGS = compile_flags)
    env.Append(F77FLAGS = compile_flags)
    env.Append(F90FLAGS = compile_flags)
    env.Append(F95FLAGS = compile_flags)

    # C compiler
    env.Replace(CC = c_compiler)
    env.Append(CCFLAGS = c_flags)
    env.Append(CPPPATH = cpppath)
    #env.Append(CPPDEFINES=["mips"])

    if debug_build:
      env.Append(FORTRANFLAGS = debug_flags)
      env.Append(F77FLAGS = debug_flags)
      env.Append(F90FLAGS = debug_flags)
      env.Append(F95FLAGS = debug_flags)
      env.Append(LINKFLAGS = link_flags_debug)
      env.Append(CCFLAGS = c_debug_flags)
    else:
      env.Append(FORTRANFLAGS = optimize_flags)
      env.Append(F77FLAGS = optimize_flags)
      env.Append(F90FLAGS = optimize_flags)
      env.Append(F95FLAGS = optimize_flags)
      env.Append(LINKFLAGS = link_flags_release)
      env.Append(CCFLAGS = c_optimize_flags)

source_folders = ["psmile", "clim", "fscint", "anaism", "anaisg", "scrip"]

source_files = ["parse.f90", "skip.f90", "parseblk.f90",
    "alloc_src.f90", "dealloc_src.f90"] + Glob("*.f") + Glob("*.F") + Glob("*.F90") + Glob("*.c")

for folder in source_folders:
    source_files += Glob("../{}/*.f".format(folder))
    source_files += Glob("../{}/*.F".format(folder))
    source_files += Glob("../{}/*.F90".format(folder))
    source_files += Glob("../{}/*.c".format(folder))

#source_files2 = Glob("../psmile/*.f") + Glob("../psmile/*.F") + Glob("../psmile/*.F90") + Glob("../psmile/*.c")
#source_files3 = Glob("../clim/*.f") + Glob("../clim/*.F") + Glob("../clim/*.F90") + Glob("../clim/*.c")
#source_files4 = Glob("../fscint/*.f") + Glob("../fscint/*.F") + Glob("../fscint/*.F90") + Glob("../fscint/*.c")

# Library('foo', ['f1.c', 'f2.c', 'f3.c'])
# Program('prog.c', LIBS=['foo', 'bar'], LIBPATH='.')

#Program('prog.c', LIBS = 'm',
#                  LIBPATH = ['/usr/lib', '/usr/local/lib'])


env.Program(target="couple", source=source_files,
    LIBS="netcdff",
    LIBPATH="../../lib/netcdf"
)

